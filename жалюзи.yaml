substitutions: 
  name: 'jaluzi'
  comment: 'Жалюзи'

esphome:
  name: ${name}

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: "********"
  password: "*******"
  fast_connect: true
  manual_ip:
    static_ip: 192.168.1.77
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
  use_address: 192.168.1.77
  power_save_mode: light

# Example configuration entry
output:
  - platform: ledc
    id: motor_forward_pin
    pin: 33

  - platform: ledc
    id: motor_reverse_pin
    pin: 32
    
switch:
  - platform: restart
    name: ${name}_Restart

button:
  - platform: template
    name: "Open"
    id: open_button
    on_press:
      - output.turn_on: motor_forward_pin
      - delay: 500ms
      - output.turn_off: motor_forward_pin
      - binary_sensor.template.publish:
          id: template_bin
          state: ON
  
  - platform: template
    name: "Close"
    id: close_button
    on_press:
      - output.turn_on: motor_reverse_pin
      - delay: 500ms
      - output.turn_off: motor_reverse_pin
      - binary_sensor.template.publish:
          id: template_bin
          state: OFF

  - platform: safe_mode
    name: Safe Mode Boot
    entity_category: diagnostic

binary_sensor:
  - platform: template
    name: "Blinds Open"
    id: template_bin

  - platform: status
    name: ${name}_Status

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: UTC-4

sun:
  latitude: 57.0486°
  longitude: 53.9872°
  on_sunrise:
    - if:
        condition:
          - binary_sensor.is_off: template_bin
        then:
          - output.turn_on: motor_forward_pin
          - delay: 500ms
          - output.turn_off: motor_forward_pin 
          - binary_sensor.template.publish:
              id: template_bin
              state: ON

  on_sunset:
    - if:
        condition:
          - binary_sensor.is_on: template_bin
        then:
          - output.turn_on: motor_reverse_pin
          - delay: 500ms
          - output.turn_off: motor_reverse_pin 
          - binary_sensor.template.publish:
              id: template_bin
              state: OFF
              
text_sensor:
  - platform: sun
    name: Sun Next Sunrise
    type: sunrise
  - platform: sun
    name: Sun Next Sunset
    type: sunset

  - platform: template
    name: ${name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

dashboard_import:
  package_import_url: github://esphome/bluetooth-proxies/esp32-generic.yaml@main

esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

bluetooth_proxy:
  active: true

sensor:
  - platform: uptime
    name: ${name}_Uptime_s
    icon: mdi:clock-outline
    id: uptime_sensor

  - platform: wifi_signal
    name: ${name}_WiFi_RSSI
    update_interval: 60s

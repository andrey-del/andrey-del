esphome:
  name: esp32

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: "******"
  password: "*********"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32 Fallback Hotspot"
    password: "E6laxgntkyRn"

i2c:
  sda: 21
  scl: 22
  id: bus_a
    
# Example configuration entry
output:
  - platform: ledc
    id: motor_forward_pin
    pin: GPIO19

  - platform: ledc
    id: motor_reverse_pin
    pin: GPIO16

sensor:
  - platform: bh1750
    name: "Освещенность"
    address: 0x23
    update_interval: 10s
    on_value_range:
        - above: 120.0
          then:
            - if:
                condition:
                         binary_sensor.is_off: template_bin
                then:
                     - output.turn_on: motor_forward_pin
                     - delay: 500ms
                     - output.turn_off: motor_forward_pin
        - below: 15.0 
          then:
            - if:
                condition:
                         binary_sensor.is_on: template_bin
                then:
                     - output.turn_on: motor_reverse_pin
                     - delay: 500ms
                     - output.turn_off: motor_reverse_pin      
        

  - platform: uptime
    name: "Blinds_Uptime_s"
    id: uptime_sensor
    update_interval: 15s

button:
  - platform: template
    name: "Open"
    id: open_button
    on_press:
      - output.turn_on: motor_forward_pin
      - delay: 500ms
      - output.turn_off: motor_forward_pin
      - binary_sensor.template.publish:
          id: template_bin
          state: ON
  
  - platform: template
    name: "Close"
    id: close_button
    on_press:
      - output.turn_on: motor_reverse_pin
      - delay: 500ms
      - output.turn_off: motor_reverse_pin
      - binary_sensor.template.publish:
          id: template_bin
          state: OFF

binary_sensor:
  - platform: template
    name: "Blinds Open"
    id: template_bin

text_sensor:
  - platform: template
    name: "Blinds_Uptime"
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s
